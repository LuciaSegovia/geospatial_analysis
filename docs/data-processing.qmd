

## Methods: Data processing

Once the datasets are selected and cleaned. The next step is preparing the variables that are going to be used in the model. Particularly, generating the different estimates of maize grain Se concentration and predicted Se concentration for each aggregation level that will be compared with the plasma Se concentration in Malawian women. 


```{r set-up, message=FALSE, warning=FALSE}

# Loading packages
library(dplyr) # data wrangling 
library(ggplot2) # data visualisation
library(sf) # spatial data manipulation
library(tmap) # spatial data visualisation

# Loading data
# Admin Boundaries for Malawi: EAs
ea_bnd  <- st_read(here::here("data", "mwi-boundaries", "EN_NSO" , "eas_bnd.shp"), 
                   quiet = TRUE)

# Reading the EA shapefile w/ updated districts (See 00_cleaning-boundaries.R)
ea_admin <- st_read(here::here( "data", "inter-output", 
                                "boundaries", "mwi_admbnda_adm4_nso.shp"), 
                   quiet = TRUE)

# Changing variable region class to factor
ea_admin$region <- as.factor(ea_admin$region)

# Maize Se conc.(from cleaned from 00_cleaning-maize.R)
maize.df<- readRDS(here::here("data", "inter-output", "mwi-grain-se_raw.RDS")) %>%
   ## Getting only entries with maize Se values
  filter(!is.na(Se_raw) & Crop == "Maize")

# Plasma Se conc. (cleaned from 00_cleaning-dhs.R)
plasma.df  <- readRDS(here::here("data", "inter-output","dhs_se_gps.rds")) %>% 
  # removing entries with missing values in plasma Se conc.
 filter(!is.na(selenium))


```


The datasets that we used are listed below:

-   `ea_admin`: This (shape)file contains the boundaries of Malawi smallest administrative units, Enumeration Areas (EAs), and information on their corresponding districts and regions. Note that the boundaries of the lakes (e.g., Lake Malawi) were excluded as maize grain nor plasma Se could have been taken within those boundaries. 

-   `maize.df`: This file contains the GPS sample location (lat/lon), maize grain Se concentration, soil pH and Mean Annual Temperature (MAT). See section XX for more information on the dataset.

-   `plasma.df`: This file contains the displaced [cluster location](#gps-location) (lon/lat), plasma Se concentration, and other individual level information (wealth quintile, BMI, etc.). See @sec-plasma for more information on the dataset.

## Generating predicted maize grain Se concentration for Malawi

-   `predmaize.df`: This file contains the coordinates of Malawi (lat/lon), the predicted maize Se concentration for Malawi and their covariance (uncertainty associated to each prediction). The data was derived from the `maize.df` dataset using ordinary kriging and the scripts can be found in `01_maize-model.R` and are based on the study of Gashu and colleagues (2022).


**TODO: Write the full info of the model**


Then, in order to calculate the mean/median value for each level of aggregation first, we need to generate the boundaries that will be used. 


## Generating the boundaries

The first two aggregations (areal units) were based on administrative boundaries (e.g., EAs, districts) whereas the other two aggregation levels were based on the "food catchment area" (buffered area).  All of the aggregation units took into consideration the cluster displacement nature of the location. 

::: {.callout-note}

Note that the location (GPS coordinates) provided in the DHS are for each cluster, not per individual or household (i.e., one women or more will share the *exact* same GPS coordinates). 

:::

### Administrative boundaries areas

We started with the EAs because are the smallest administrative units, and they are nested within the other (bigger) administrative units (Districts and Regions).

Due to the nature of the displaced cluster location, the smallest administrative unit will not be one EA per women, but a number of EAs per cluster for all the women living in the same cluster. For more information on the GPS displacement see @sec-gps-location. 

The EAs included in each cluster are based on the displacement rage (2.5km for urban and 5km per rural) bounded by district, full details are disclosed below. While for the district information it was provided within the DHS dataset. 

#### Enumeration Areas

In the plasma dataset, we do not have information about the EAs where each women or cluster point lies in. Therefore, in order to calculate the mean/media maize Se concentration for each administrative unit, we need to identify the EAs that were plausible residing place for the women in the DHS survey, as mentioned above. 


```{r}

# Getting only cluster location (to avoid duplicates), 
geodata.df <- plasma.df %>% select(survey_cluster1, buffer) %>% 
  distinct() %>% 
# renaming buffer as geometry for converting into spatial object
  dplyr::rename(geometry = "buffer") %>% st_sf(., crs = "EPSG:4326")

```

To do so, we used the spatial join to identify the Malawi EAs (`ea_admin`) within the buffered areas for each cluster.

```{r}

# Getting info on the admin boundaries (EA/district level)
# Allocating buffered areas to each admin unit

geodata_ea <-  st_join(geodata.df, ea_admin)

```

In the @fig-map2, we can see, in dark red, the EAs that were within the buffered areas, and in blue the buffers. 

```{r label = "fig-map2", fig.cap = "Map of Malawi with the possible EAs where the household that were surveyed in the DHS-MNS may reside (in dark red), and the buffer representing the GPS displacement (in blue).", fig.height=7, fig.width=6}

# Aggregate boundaries the whole country (with lakes)
malawi_bnd_lakes <- st_union(ea_bnd)

# Aggregate boundaries the whole country
malawi_bnd <- st_union(ea_admin)

# Generating the map
tm_shape(ea_admin) +
  tm_polygons(col = "white", 
              border.col = "#666666", border.alpha = 0.3, lwd = 0.2) +
tm_shape(malawi_bnd) +
  tm_borders(col = "#666666", alpha = 0.6, lwd = 0.5) +
  tm_shape(malawi_bnd_lakes) +
  tm_borders(col = "black", alpha = 0.6, lwd = 0.5) +
    tm_shape(ea_admin$geometry[ea_admin$EACODE %in% unique(geodata_ea$EACODE)]) +
  tm_polygons(col ="firebrick4", border.col = "black", border.alpha = 0.3) +
  tm_shape(geodata.df) +
  tm_borders(col = "steelblue" )

```

When we checked the EAs that were included in each cluster, we realised that there were some clusters that were very close to the district boundaries, thus including some EAs from different district. According to the DHS documentation, displacement was performed to respect district boundaries, hence households will be within their district (see district information on DHS dataset) and because here we are looking at administrative boundaries, we need to remove the EAs that did not belong to the district for each cluster. 

```{r}

# Checking the EAs per buffer and district

(g1 <- geodata_ea %>%  st_drop_geometry() %>% 
  mutate_at("survey_cluster1", as.character) %>% 
  ggplot(aes(x=reorder(survey_cluster1, survey_cluster1, function(x)-length(x)))) +
  geom_bar(aes(fill = DISTRICT)) +
  theme_bw() +
  labs(
    x = "Cluster") + 
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  theme(strip.text = element_text(size = 12),
        axis.text.y = element_text(size = 12), 
        axis.text.x = element_text(size = 10, angle =30)))

```

Moreover, this extended to including district from different regions.

```{r}

g1 + 
  facet_wrap(~region, labeller = as_labeller(c(`1` = "Northern", 
                                               `2` = "Central", 
                                               `3` = "Southern")),
             scales = "free_x") +
  theme(legend.position="top") 

```


We identified the districts by combining the district names (`dist_name`) in the DHS survey and the district names (`ADM2_EN`) which were combined within the `ea_admin` dataset. For more information on that dataset and variables see @sec-explo-bound. 
  
Some minor renaming was needed in order to identify the correct district and a dummy variable to check that districts were the same was generated, as shown in the following code section. 


```{r}

# Checking the districts in plasma dataset
# Converting back from spatial obj to dataframe
plasma.df  <- geodata_ea  %>% st_drop_geometry()  %>%  # removing geometry
  right_join(., plasma.df, relationship = "many-to-many")  # multiple EAs per cluster,                                                         multiple WRA per cluster. 


# New variable to check the correct district (based on survey)
plasma.df$dist_name2 <- as.character(plasma.df$dist_name)

# Changing the spelling to fit the NSO boundaries file 
plasma.df$dist_name2 <- gsub("nkhota kota", "nkhotakota", plasma.df$dist_name2)
plasma.df$dist_name2 <- gsub("lilongwe rural", "lilongwe", plasma.df$dist_name2)
plasma.df$dist_name2 <- gsub("ndanje", "nsanje", plasma.df$dist_name2)
plasma.df$dist_name2 <- gsub("zomba rural", "zomba", plasma.df$dist_name2)
plasma.df$dist_name2 <- gsub("blantyre rural", "blantyre", plasma.df$dist_name2)
plasma.df$dist_name2 <- gsub("mulange", "mulanje", plasma.df$dist_name2)
plasma.df$dist_name2 <- gsub("chradzulu", "chiradzulu", plasma.df$dist_name2)

# Dummy variable to check whether districts are the same or not
plasma.df$boundaries_check <- ifelse(tolower(plasma.df$ADM2_EN) == plasma.df$dist_name2, TRUE, FALSE)

# Checking district that are the same and those with NA (some dist_name were NA)
plasma.df %>% dplyr::filter(boundaries_check == TRUE | is.na(boundaries_check) ) %>% 
  select(survey_cluster1, ADM2_EN, dist_name2) %>% distinct() %>% knitr::kable()

```

After checking tha we have identify the correct district for each cluster, a dataset with each cluster (`survey_cluster1`) and their corresponding district was obtained. 

```{r}

# Getting the cluster and corresponding district
district <- plasma.df %>% dplyr::filter(boundaries_check == TRUE) %>%
  distinct(survey_cluster1, ADM2_EN)

knitr::kable(district)

```

That dataset (`district`) was used to exclude those EAs that were not in the target district of each cluster. 

```{r}

# Excluding EAs that were not with the corresponding district for each cluster
plasma.df <- left_join(district, plasma.df)

```

Finally, we generate the administrative boundaries master file which contains information on each cluster (`survey_cluster1`) and its cluster-EA level (all the EAs within the corresponding buffer areas and district) and the district. The codes (`EACODE` and `ADM2_PCODE`) can be bind with the respective shapefiles (`ea_bnd`, `ea_admin` or `dist_bnd`). 

```{r, eval=FALSE}

# Saving the master file with the survey cluster (id) and the admin level
# EAs, districts, and regions.

plasma.df %>% distinct(survey_cluster1, EACODE, 
                        ADM2_PCODE, ADM2_EN, ADM1_PCODE, ADM1_EN) %>% 
   filter(!is.na(ADM1_EN))  %>% # Only one NA as per above
   saveRDS(here::here("data", "inter-output", "aggregation", "master-cluster-admin-level.RDS"))

```


### Household catchment areas (buffer) 


For the household catchment areas, ideally, we would like to test the aggregation of the maize grain Se as function of the distance from each household. For instance, with buffered areas around the household, that could be identified as "food-sheds" or "food catchment areas". However, as explained in previous sections, the location used to generate the buffer are not the real household location but an approximation. By generating bigger than the displacement area buffers we aim to capture the plausible "food catchment area" for each WRA in the sample

```{r}

# Getting the cluster and their centroid to generate the two buffered areas.
GPS <- plasma.df %>% distinct(survey_cluster1, Longitude, Latitude)

# Transforming maize data.frame into a spatial object (geometry) 
geogps <- st_as_sf(GPS , coords =c("Longitude", "Latitude"),
                   crs = "EPSG:4326")

```



Three buffer distances selected were:

1) **15km buffer** to cover the maximum displacement in rural area for the GPS location of the DHS clusters. The maximum displacement in rural area is 10km however, when we tested the 10km buffer, we found that one EA (497) did not have an observed sample with that range, thus we decided to increase the buffer size by 5km, we also tested 12km but it did not provide any results.  

2) **25 and 30km buffer** that cover a sensible distance between EAs and district, and which is according to REF, the mean distance between households and the closest market in Malawi (REF). 

The genereation of the buffer is done using a loop, that save the shapefiles into the `inter-outuput` file, and it is design to be able to change the distances of the buffer if new evidence of bigger or smaller buffer are published. 


```{r, eval=FALSE}

# Choice of buffers
buffer <- c(10, 25, 30)

# Loop over the number of buffers:
for(i in 1:length(buffer)){
  
  data.df <- GPS
  distance <- as.numeric(paste0(buffer[i], "000"))
  #variable <- paste0("buffer", buffer[i]) 
  
  # Buffer in meters (10km & 25km)
  data.df$buffer <- st_buffer(geogps$geometry, dist = distance)
  
  # Saving the shapefile with the buffers
  st_write(data.df, here::here( "data", "inter-output", 
                                "boundaries", 
                                paste0("mwi_gps-buffer", buffer[i], ".shp")))
  
}

```



#### Enumeration Areas of the maize grain Se dataset {#sec-maize-ea}

Similarly, in the maize grain Se dataset, the EAs were not available for each sample point. Therefore, in order to calculate the mean/media maize Se concentration for each administrative unit, we need to link the dataset with the administrative boundaries of Malawi (`ea_admin`) with the maize grain Se dataset (`maize.df`).

Here, we could, as first step, identify the EAs where each maize grain were sampled. This could be easily done for the observed dataset, the number of samples are still small, on the other hand, for the predicted maize grain Se dataset, this spatial joint may take very long. Therefore, because the objective is to proivde values for those aggregation units, we could use the cluster-EAs, the district, and the buffered areas. 

To do so, we need to spatially merge the boundaries dataset (`ea_admin`) and the maize Se dataset. Hence, some data preparation need to be done before carrying the spatial join. For instance, both datasets need to be spatial objects. 


```{r}

# Checking the class of the two datasets
class(ea_admin)
class(maize.df)


```

We can see that the maize grain dataset is not a spatial object. Therefore, we need to use the `sf package`. 

```{r}

# Transforming maize data.frame into a spatial object (geometry) 
geomaize.df <- st_as_sf(maize.df,
              coords =c("Longitude", "Latitude"), crs = "EPSG:4326")

# Checking the effect of the line above
class(geomaize.df)

# Adding a variable to store info on distance 
geomaize.df$dist_in_m <- NA


```

Then, we can merge the two dataset. 

```{r}

# Getting info on the admin boundaries (EA/district level)
# Allocating Se values to each admin unit
geomaize_ea.df  <-  st_join(geomaize.df, ea_admin)

```


There were some maize grain samples (n=`r sum(is.na(geomaize_ea.df$EACODE))`) without a corresponding EA. This was because some of the GPS location were incorrect/inaccurate (i.e., one sample location lied outside Malawi boundaries), or due to lying in outside boundaries as it is shown in the map below by the red dots (@fig-map1). 


```{r label = "fig-map1", fig.cap = "Map of Malawi divided by Enumeration Areas (EAs) and the red points representing the maize grain Se samples outside EA boundaries."}

# Storing data of the maize Se samples w/o EAs
missing  <- geomaize_ea.df[which(is.na(geomaize_ea.df$EACODE)),]

# Plotting maize Se sample falling out EAs
tm_shape(ea_bnd) +
tm_polygons() +
tm_shape(missing) +
tm_symbols(col ="red", size =0.1)

```

Instead of removing the observations, we decided to allocated them to the closest EA (in m). The information on how far (in m) were from the EA that were allocated too, was also stored in the new variable that was generated in previous steps: `dist_in_m`.

```{r}

# Fixing missing (EAs for maize Se values) 
m <-  c(90, 200, 300, 4500)

for(i in 1:length(m)){

geomaize_ea.df[which(is.na(geomaize_ea.df$EACODE)), "dist_in_m"] <- m[i]
  
geomaize_ea.df[which(is.na(geomaize_ea.df$EACODE)),]  <-  st_join(geomaize_ea.df[which(is.na(geomaize_ea.df$EACODE)),1:ncol(geomaize.df)-1], 
    ea_admin, st_is_within_distance,  dist = units::set_units(m[i], "m")) 

}


```


Finally, the maize grain dataset was ready for calculating the mean/median Se concentration at the different administrative boundaries and was stored into as intermediary output for further analysis. Before saving the dataset, it was transformed back into a data frame by removing the `geometry` and adding back the information about the samples locations as coordinates (`longitude` and `latitude`).


```{r}

# Converting back from spatial obj to dataframe
maize.df  <- geomaize_ea.df  %>% st_drop_geometry()  %>%  #removing geometry
            right_join(., maize.df)  # adding back the long/lat variable

```


```{r eval=FALSE}

# Saving dataset with aggregation unit for modelling 
saveRDS(maize.df, here::here("data", "inter-output",
                             "mwi_maize-se-raw_admin.RDS"))

```



### Co-location: combining datasets by location

Samples, both maize and plasma, were supposed to be co-located (i.e., collected at the same EA) as per documentation on Gashu et al, (2021). However, when we checked the co-location of the two datasets: plasma Se values and the maize Se, based on the EAs where they were collected/ reported around 60% of our sample did not share the same EA. This was probably  due to the EA displacement performed within the DHS protocol (see XX). 

Hence, we decided to use the EAs where maize sample were collected (at the were not displaced), and to co-locate (by closest distance possible) the EAs within the buffer area displaced (2km and 5km for urban and rural respectively). 

Even when doing that, there were still two clusters (group of EAs) that did not have any maize grain Se value co-location. For those clusters, the closest EA (xx m) with maize grain Se values were used. 

#### Cluster level observed maize Se

First, we are getting the cluster and EA information for which we would need the maize Se conc. 

```{r}

# Cluster's EA info
cluster.df <- plasma.df %>% 
  distinct(survey_cluster1, EACODE, ADM2_PCODE, ADM2_EN, urbanity)

```

We have already identified in which EAs the observed maize dataset are in in the @sec-maize-ea. Therefore, we only need to merge the two dataset, and get the maize Se conc. for each EA within each cluster. 

```{r}

# Merge cluster's EA and observed maize
maize_cluster <- maize.df %>% right_join(., cluster.df) 

# Visualising the maize Se conc. per cluster
boxplot(maize_cluster$Se_raw ~ maize_cluster$survey_cluster1)

```

Then, we can calculate the mean/median maize Se concentration for each cluster.

```{r}

# Calculating the maize grain Se conc per cluster
maize_cluster <- maize_cluster %>% 
  group_by(survey_cluster1) %>% 
  summarise(Se_mean = mean(Se_raw, na.rm = TRUE), 
            Se_sd = mean(Se_raw, na.rm = TRUE), 
            Se_median = median(Se_raw, na.rm = TRUE), 
            Se_iqr = IQR(Se_raw, na.rm = TRUE), 
            Se_n = n())

knitr::kable(maize_cluster)

```


We can see that there were `r sum(is.na(maize_cluster$Se_mean))` clusters without any maize Se concentration, this is because there were no samples collected for any of the EAs with that clusters. 

```{r}

par(mfrow = c(1, 2))
hist(maize_cluster$Se_mean)
hist(maize_cluster$Se_sd)

```

Here, we identified the clusters without any observe maize Se concentration value.

```{r}

# Getting the cluster with missing values 
miss <-  unique(maize_cluster$survey_cluster1[is.na(maize_cluster$Se_mean)])

```

#####  Missing values in the observed Se maize values

We need at least one maize Se value per cluster to be compared with the plasma Se. However, there were four clusters (`r toString(miss)`) from the plasma Se dataset (`plasma.df`) that did not match with any of the EAs in the observed Se maize grain dataset (`maize.df`). Hence, the approach taken was the following:

```{r}

# Selecting only the EAs that were included in the missing clusters
 ea_cluster <- cluster.df %>% filter(survey_cluster1 %in% miss) %>% 
   distinct(EACODE) %>% left_join(., ea_admin) %>% st_as_sf()

```

Firstly, we identified the EAs that were included in each of the missing clusters (`r n=unique(ea_cluster$EACODE)`).

```{r}

missing <- readRDS(here::here("data", "inter-output", "filling-missing-Se-observed-maize.RDS"))

```


Secondly, we assigned the closest data point (i.e, maize grain Se conc. value) for each EA. To do so, we created a loop that finds the closest data point 20m increment each time for all the EAs. And it store the distance for future reference.

Note that we are starting at 230m distance because we found th first match at 250m. 

We need to allocate at least one maize Se concentration for each cluster and hence, we identified the closest data point (the closest maize sample with Se values) in the dataset for each of the four cluster. We decided that instead of:
  
```{r}
cluster.df  %>% 
  filter(survey_cluster1 %in% miss) %>% left_join(., missing) %>% 
  select(survey_cluster1, urbanity,EACODE,ADM2_EN, dist_in_m, Se_raw) %>% 
 group_by(survey_cluster1) %>% 
  summarise(Se_mean = mean(Se_raw, na.rm = TRUE), 
            Se_sd = sd(Se_raw, na.rm = TRUE), 
            dist_mean = mean(dist_in_m, na.rm = TRUE), 
            dist_sd = sd(dist_in_m, na.rm = TRUE))
```
  
  
  a) Using the mean/ median of all cluster values because there are many repeated values. For instance, the closest data point for 11 (out of 15) EAs within the cluster 200 were the same (Se= 0.344mcg/kg) as it is shown in @fig-cluster1.
  

```{r label = "fig-cluster1", fig.cap = "Histogram of the closest maize Se concentration for each EA in each of the missing cluster.", fig.height=7, fig.width=6}
  
cluster.df  %>% 
  filter(survey_cluster1 %in% miss) %>% left_join(., missing) %>% 
  arrange(survey_cluster1, dist_in_m) %>% 
  select(survey_cluster1, urbanity,EACODE,ADM2_EN, dist_in_m, Se_raw) %>% 
  ggplot(aes(Se_raw, fill=as.character(survey_cluster1))) + 
  geom_histogram() + scale_fill_discrete(name = "Cluster") +
  theme_bw() + facet_wrap(~survey_cluster1) 

```


```{r}

cluster.df  %>% 
  filter(survey_cluster1 %in% miss) %>% left_join(., missing) %>% 
  select(survey_cluster1, urbanity, EACODE,ADM2_EN, dist_in_m, Se_raw) %>% filter((urbanity == "1" & dist_in_m <2500) | (urbanity == "2" & dist_in_m <5000)) %>% 
 group_by(survey_cluster1) %>% 
  summarise(Se_mean = mean(Se_raw, na.rm = TRUE), 
            Se_sd = sd(Se_raw, na.rm = TRUE), 
            dist_mean = mean(dist_in_m, na.rm = TRUE), 
            dist_sd = sd(dist_in_m, na.rm = TRUE),
             dist_max =max(dist_in_m, na.rm = TRUE))

```


 b) Using those within buffered rage (e.g. 2.5km for urban and 5km for rural). This will lead to exclusion of all the values for the cluster 777 which corresponds to Lilongwe city (See @fig-cluster2).  
 
  
```{r label = "fig-cluster2", fig.cap = "Graph showing the distance and concentration of the closest maize Se samples for each EA in each of the missing cluster.", fig.height=7, fig.width=6}
  
cluster.df  %>% 
  filter(survey_cluster1 %in% miss) %>% left_join(., missing) %>% 
  arrange(survey_cluster1, dist_in_m) %>% 
  select(survey_cluster1, urbanity,EACODE,ADM2_EN, dist_in_m, Se_raw) %>% 
  ggplot(aes(Se_raw, dist_in_m, colour=as.character(ADM2_EN))) + 
  geom_point(aes(size=Se_raw))  +  
  labs(size="Maize Se conc.(mcg/kg)", colour="District") +
  theme_bw() + facet_wrap(~survey_cluster1) 

```

c) Using the closest value for each cluster. 

```{r}

cluster.df  %>% 
  filter(survey_cluster1 %in% miss) %>% left_join(., missing) %>% 
  arrange(survey_cluster1, dist_in_m) %>% 
  select(survey_cluster1, urbanity,EACODE,ADM2_EN, dist_in_m, Se_raw) %>% 
  group_by(survey_cluster1) %>% 
  slice_min(dist_in_m, n=1)

```


Finally, we decided to use the closest location with reference to the cluster because for this analysis the aggregation unit, and hence the reference point are the clusters. If we would allocate one value per EA (as for the other approaches) we should do the same for the whole sample. As currently, we have only picked those EAs with observed values given that at least one value was available per EA, and trying at least to avoid duplicated observed values. 

Some checks were performed to ensure that maize Se samples values were not duplicated. 


##### Limitations of the co-location at cluster level

There were only five clusters where the closest samples and the cluster-EAs were not co-located, as shown in the table XX. Four of which were represented by only one sample point and most of them were at close distance and below the displacement distance (less than 2.5km). 

- **Lilongwe city** (cluster 777): The value of maize grain Se concentration used may not be representative due to a number of issue:

 a) Related to the distance of the nearest sampling site: It was the longest distance between the cluster-EAs and the nearest maize sampling site. Additionally, the distance was almost double the displacement for urban areas (2.5km vs 4.3km). This may be explained by the lack of agricultural fields (to grow maize) inside the city which was also confirm by local experts. Furthermore, according to personal communication with local experts (G.O), the acquisition dynamics in the city are quite diverse, with people in the highest quintiles buying from supermarkets and/or bringing from their hometowns, and those form the middle and lowest quintile buy in local market, local millers and/or going back to their family villages for harvest. There will be small family trades like bringing sugar and oil from the city to the home village and taking maize flour, particularly during harvest season. In addition, some climatic events that may affect crops and low stock in the lean season may affect as well the origin of the maize. For instance, this year (2023/2024) some of the maize distributed from aids (i.e., WFP) has been grown in Tanzania. Definitely more insights in local trades, and city food acquisition will be needed. 
 
 b) Related to the number of samples: In part, due to the distance to the nearest sample locations, we only have one maize grain Se concentration value for whole city, in addition, only one cluster was included in "Lilongwe city" as such, and hence the variation and representation it may be further reduced. 
 
#### District level observed maize Se

All districts have sampled locations of the observed maize grain Se concentration. Hence, a number of approaches could have been taken to aggregate the observed maize values. For instance, in order to use the same values for both aggregation units, we could have use the dataset used in the previous steps and using the EAs to identify which sampled points laid within each district. In that case, the optimal case would have been to exclude the samples where the location was not within the EAs boundaries, leading then to disparities between the two dataset. 

We decided then, to do a spatial joint between the maize dataset and the distict boundaries. We can see that one district is missing: *Likoma* which we have no maize sample, but also no plasma samples were collected.

One thing is tricking is that there are more maize samples per district when using the EA as opposed to the district boundaries. However, when plotting them against each other it seems that there are in agreement and closelly aligned. 

**TODO: Review why there is disagreement between the number of samples by the two methods**


##### Further thoughts on data processing steps and results interpretation

The "co-location" issues were only problematic at the smallest area tested (e.g., cluster level) and for observed mean/median (that calculated using only sampled (observed/analytical) values). Hence, the concern when comparing with the predicted surface will be:

**What are we really measuring/ comparing?**

We want to know whether: 


a)  Does observed estimates provides better prediction/ explanation of the plasma Se than predicted surfaces? 


b)  At what level of data aggregation we can see better explanation of the plasma Se values? 

Re: Does this mean that I should use the predicted surface of the same EAs as of the observed, regardless that I could actually use the mean of the same EAs as reported in the DHS cluster?

  --> Sensitivity analysis: Compare predicted surface mean/ median of the actual cluster (aggregated EA) values with the same EA only of the observed values (i.e., replicating the same area of the observed values). To see if the results of our analysis are actually measuring methodological differences (i.e., between normal aggragated mean and predicted surface), or on the contrary are picking spatial variation in maize Se values (i.e., there is a difference between picking the nearest EAs and peaking the "actual" EAs). 


#### Testing assumptions

### Household location

The coordinates for the HHs are only provided at cluster level (EAs). Hence, we need to check first the variability within cluster. 

When we checked with boxplots (See 01_Explora_Malawi_model.R, line 258), the variability of Plasma Se by EAs, we have realised two key things:
1) In general, we could assume that there is "low" EAs variability in the Plasma Se.
2) There is high variability within regions. As we can see by the scale of the plots, in northern region the scale ranged from 50-150nmol/mL, in central region from 0-300nmol/mL (#TODO:check the upper values here), with the highest values for Salima district (as expected), and the southern region ranged from 50-250nmol/mL.


It is important that we think about the displacement of the household location and the potential impacts on the final results. For instance, when two households are in the same EA, the maize Se value is the same for both households. 

See sensitivity analysis. 

##### Displaced location EAs

We studied the distance between EA (based on the displaced GPS location) with plasma Se values, and the maize Se EAs. To do so, we added the distance (in m) at which the co-location was found, when we studied the distance for rural clusters, we can see that only one cluster, corresponding to n=8 WRA reported location, were within higher distance (>5km) of the displacement. This corresponded to 1.23% of the sample of rural household which is below the reported, 10% displacement of 10km.

##### Most probable EA

Following the guidelines on the use of DHS GPS data, (@perez2013guidelines), we assumed the missclassification potential, then we:

- identify the most probable EA
- compared that with the results above, i.e.,  with EAs were the same and which one were different
- checked for those most probable which one had maize Se conc. and which one not 

The list of the EAs where the WRA potentially lived was obtained in the scripts (00_cleaning-locations.R), and it was used to generate the centroids and buffers for further modelling in the 00_cleaning-boundaries.R.