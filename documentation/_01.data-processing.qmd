---
title: "Methods: Data processing"
format: 
  html:
    number-sections: true
    number-offset: 1
    code-fold: show 
    embed-resources: true
editor: source
---


## Introduction

Once the datasets are selected and cleaned. The next step is preparing the variables that are going to be used in the model. Particularly, generating the different estimates of maize grain Se for each aggregation level that will be compared with the plasma Se concentration in women in Malawi. 

The first two aggregation were are at administrative boundaries whereas the other two boundaries were based on the cluster location. 

## Administrative boundaries areas

In our maize grain Se dataset, we do not have inforamtion about the administrative boundaries (e.g, EAs, district) where each sample lies in. Therefore, in order to calculate the aggregation at the admin. level, we need to link the dataset with the administrative boundaries (`ea_bnd`) with the maize grain Se dataset (`maize.df`).


```{r set-up, message=FALSE, warning=FALSE}

# Loading packages
library(dplyr) # data wrangling 
library(sf) # spatial data manipulation
library(tmap) # spatial data visualisation

# Loading data
# Admin Boundaries for Malawi: EAs
ea_bnd  <- st_read(here::here("data", "mwi-boundaries", "EN_NSO" , "eas_bnd.shp"), quiet = TRUE)
# Admin boundaries w/o Lake
# Selecting only variables that are interesting:
  # EA code, EA area, TA code, district & geometry
ea_admin <- ea_bnd %>% filter(!grepl("lake", DISTRICT, ignore.case = TRUE)) %>% 
  select(c(4, 10, 11, 17, 18))

# Maize Se conc.(from cleaned from 00_cleaning-maize.R)
maize.df<- readRDS(here::here("data", "inter-output", "mwi-grain-se_raw.RDS")) %>%
   ## Getting only entries with maize Se values
  filter(!is.na(Se_raw) & Crop == "Maize")

# Plasma Se conc. (cleaned from 00_cleaning-dhs.R)
plasma.df  <- readRDS(here::here("data", "inter-output","dhs_se_gps.rds")) %>% 
  # removing entries with missing values in plasma Se conc.
 filter(!is.na(selenium))


```

The next step is to identify the Enumeration Areas where each maize Se samples were taken. To do so, we need to spatially merge the boundaries dataset (`ea_bnd`) and the maize Se dataset. Hence, some data preparation need to be done before carrying the spatial join. For instance, both datasets need to be spatial objects. 


```{r}

# Checking the class of the two datasets
class(ea_bnd)
class(maize.df)

# Transforming maize data.frame into a spatial object (geometry) 
geomaize.df <- st_as_sf(maize.df,
              coords =c("Longitude", "Latitude"), crs = "EPSG:4326")

# Checking the effect of the line above
class(geomaize.df)

# Adding a variable to store info on distance 
geomaize.df$dist_in_m <- NA


```

Then, we can merge the two dataset. 

```{r}

# Getting info on the admin boudaries (EA/district level)
# Allocating Se values to each admin unit
geomaize_ea.df  <-  st_join(geomaize.df, ea_admin)

```


There were n=`r sum(is.na(geomaize_ea.df$EACODE))` without a corresponding EA. This is because some of the GPS location were incorrect/inaccurate (i.e., one sample location lied outside Malawi boundaries), or due to lying in outside boundaries as it can be seen by the red dots in the map below (@fig-map1). 


```{r label = "fig-map1", fig.cap = "Map of Malawi divided by Enumeration Areas (EAs) and the red points representing the maize grain Se samples outside EA boundaries."}

# Storing data of the maize Se samples w/o EAs
missing  <- geomaize_ea.df[which(is.na(geomaize_ea.df$EACODE)),]

# Plotting maize Se sample falling out EAs
tm_shape(ea_bnd) +
tm_polygons() +
tm_shape(missing) +
tm_symbols(col ="red", size =0.1)

```

Instead of removing the observations, we decided to allocated them to the closest EA (in m). The information on how far (in m) were from the EA that were allocated too, was also stored in the new variable that was generated in previous steps: `dist_in_m`.

```{r}

# Fixing missing (EAs for maize Se values) 
m <-  c(90, 200, 300, 4500)

for(i in 1:length(m)){

geomaize_ea.df[which(is.na(geomaize_ea.df$EACODE)), "dist_in_m"] <- m[i]
  
geomaize_ea.df[which(is.na(geomaize_ea.df$EACODE)),]  <-  st_join(geomaize_ea.df[which(is.na(geomaize_ea.df$EACODE)),1:ncol(geomaize.df)-1], 
    ea_admin, st_is_within_distance,  dist = units::set_units(m[i], "m")) 

}


```

Once each sample of maize Se was allocated to their administrative boundaries (EAs and district), we are only missing the admin level one, which is region. This variable was greated using the information stored in the EA code, as each `EACODE` starting number is corresponding to the region in which they belong to. 

```{r}

# Adding a variable for region (1>3 = N>S)
geomaize_ea.df$region  <-  NA
geomaize_ea.df$region[grepl("^1", geomaize_ea.df$EACODE)]  <- "1"
geomaize_ea.df$region[grepl("^2", geomaize_ea.df$EACODE)]  <- "2"
geomaize_ea.df$region[grepl("^3", geomaize_ea.df$EACODE)]  <- "3"

```

Finally, the dataset which is ready for calculating the aggregation level at admin. level was stored into as intermediary output for further analysis. Before saving the dataset, it was transformed back into a dataframe by removing the `geometry` and adding back the information about the samples locations as coordenates (`longitude` and `latitude`).

```{r eval=FALSE}

# Converting back from spatial obj to dataframe
maize.df  <- geomaize_ea.df  %>% st_drop_geometry()  %>%  #removing geometry
            right_join(., maize.df)  # adding back the long/lat variable

# Saving dataset with aggregation unit for modelling 
saveRDS(maize.df, here::here("data", "inter-output", 
                            "mwi_maize-se-raw_admin.RDS"))

```


#### Household location-based areas (buffer) 
 
For the household-based areas, ideally, we would like to test the aggregation of the maize grain Se as function of the distance from each household. For instance, with buffered areas around the household (or other measure of distance), identified as "food-sheds" or "food catchment areas". However, due to anonymity protection household locations are not available, only the displaced GPS location of each cluster is provided. This means that the population centroid of each cluster was register in the original survey, and then displaced within 2km for urban clusters and within 5km for rural clusters, with 10% of the rural clusters displaced within 10km buffer. Therefore, the location of the households could be in any area within the EA. Therefore, it is often not advised to used and/or link this type of data to distance-based measurement and/or small level areas where high risk of missclassification may exist. 

Therefore, we decided to use the buffer areas instead of the point locations (GPS coordinates) to standardise/ minimise the measurement error from the off-setting of the coordinates. In order to identify the probable EAs where the households are located. 

```{r}

# Getting only cluster location (to avoid duplicates), 
geodata.df <- plasma.df %>% select(survey_cluster1, buffer) %>% 
  distinct() %>% 
# renaming buffer as geometry for converting into spatial object
  dplyr::rename(geometry = "buffer") %>% st_sf(., crs = "EPSG:4326")

```

Then, we used the spatial join to identify the EAs in the boundary of Malawi without the lakes dataset (`ea_admin`) with the buffered areas for each cluster.

```{r}

# Getting info on the admin boudaries (EA/district level)
# Allocating buffered areas to each admin unit

geodata_ea <-  st_join(geodata.df, ea_admin)

```

In the @fig-map2, we can see the EAs that were within the buffered areas, and in blue the buffers. 

```{r label = "fig-map2", fig.cap = "Map of Malawi with the possible EAs where the household that were surveyed in the DHS-MNS may reside (in dark red), and the buffer representing the GPS displacement (in blue).", fig.height=7, fig.width=6}

# Aggregate boundaries the whole country (with lakes)
malawi_bnd_lakes <- st_union(ea_bnd)

# Aggregate boundaries the whole country
malawi_bnd <- st_union(ea_admin)

# Generating the map
tm_shape(ea_admin) +
  tm_polygons(col = "white", 
              border.col = "#666666", border.alpha = 0.3, lwd = 0.2) +
tm_shape(malawi_bnd) +
  tm_borders(col = "#666666", alpha = 0.6, lwd = 0.5) +
  tm_shape(malawi_bnd_lakes) +
  tm_borders(col = "black", alpha = 0.6, lwd = 0.5) +
    tm_shape(ea_admin$geometry[ea_admin$EACODE %in% unique(geodata_ea$EACODE)]) +
  tm_polygons(col ="firebrick4", border.col = "black", border.alpha = 0.3) +
  tm_shape(geodata.df) +
  tm_borders(col = "steelblue" )


```



Two buffer distances were selected:

1) **10km buffer** to cover the max displacement in rural area for the GPS location of the DHS clusters, and,

2) **20-30km buffer** that cover a sensible distance between EAs and district, and which is according to REF, the mean distance between households and the closest market in Malawi (REF). 

For identifying the EA centroids we used the EAs with maize sampling sites were used to generate the buffers.

##### Buffered areas based on the maize sampling sites

The centroid of the EAs with maize sampling sites were used to generate the buffers, which was based on the assumption that the maize Se coordinates (with no offset) were the correct EAs on the assumption that all the EAs where the MNS was carried out were sampled in the GeoNutrition study (@ref-Gashu). In addition, because maize samples were not collected in all EAs, and we are not predicting maize Se values, the EAs with maize Se values would be driving the location. 

### Co-location: combining datasets by location

#### Limitations of the co-location

Samples, both maize and plasma, were supposed to be co-located (i.e., collected at the same EA) as per documentation on Gashu et al, (2021). However, due to the EA displacement performed within the DHS protocol (see XX), around 60% of our sample did not share the same EA. Hence, we decided to use the EAs where maize sample were collected (at the were not displaced), and to co-locate (by closest distance possible) the plasma cluster location (See script 00_cleaning-location.R).

We added the distance (in m) at which the co-location was found, when we studied the distance for rural clusters, we can see that only one cluster, corresponding to n=8 WRA reported location, were within higher distance (>5km) of the displacement. This corresponded to 1.23% of the sample of rural household which is below the reported, 10% displacement of 10km. 

#### Testing assumptions: Most probable EA

Following the guidelines on the use of DHS GPS data, (@perez2013guidelines), we assumed the missclassification potential, then we:

- identify the most probable EA
- compared that with the results above, i.e.,  with EAs were the same and which one were different
- checked for those most probable which one had maize Se conc. and which one not 

The list of the EAs where the WRA potentially lived was obtained in the scripts (00_cleaning-locations.R), and it was used to generate the centroids and buffers for further modelling in the 00_cleaning-boundaries.R.